<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mr. Park's Website on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/</link><description>Recent content in Mr. Park's Website on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Aug 2020 10:49:24 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://mrparkonline.github.io/about/</link><pubDate>Sat, 08 Aug 2020 14:14:58 -0400</pubDate><guid>http://mrparkonline.github.io/about/</guid><description>This about.md</description></item><item><title>Example</title><link>http://mrparkonline.github.io/guides/example/</link><pubDate>Fri, 07 Aug 2020 17:33:13 -0400</pubDate><guid>http://mrparkonline.github.io/guides/example/</guid><description>Markdown is fully supported So are a variety of other flavors If you prefer certain flavors, you should check it out on the official documentation.</description></item><item><title>Dictionary</title><link>http://mrparkonline.github.io/courses/datastruct/dictionary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/dictionary/</guid><description>Dictionary in Python 3 Dictionary (Associative Array, map, symbol table) is a data type that stores a collection of (key, value) pairs, such that each possible key appears at most once in the collection.
Common Operations:
Adding a pair Removing a pair Modify an existing pair Lookup of a value associated with a particular key Aside: This concept is an introduction to concepts similar to: hash table and search trees</description></item><item><title>Map &amp; Filter</title><link>http://mrparkonline.github.io/courses/datastruct/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/map/</guid><description>Map &amp;amp; Filter In Python 3 In this note, we will be covering some useful built-in functions to help us extend our list comprehension capabilities.
These two functions that we learn will also be revisited when we do functional programming and lambda functions.
The Map Function The idea of a map function is to apply a function to an iterable data.
Formatting: map(function_name, sequence) -- function_name: any function (built-in or selfmade) that returns a desired value of choice -- sequence: any iterable data type # Example def square(num): &amp;#39;&amp;#39;&amp;#39; squares the given num argument &amp;#39;&amp;#39;&amp;#39; return num ** 2 # end of square array = list(range(1,11)) square_array = list(map(square, array)) print(&amp;#39;Original Array:&amp;#39;, array) print(&amp;#39;Array Squared:&amp;#39;, square_array) Original Array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Array Squared: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] One thing to note about the map function is that it doesn&amp;rsquo;t return a specific data type, but rather, an python iterable data.</description></item><item><title>Matrices &amp; List Comprehension</title><link>http://mrparkonline.github.io/courses/datastruct/matrices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/matrices/</guid><description>Matrices in Python 3 What is a Matrix? Mathematically, matrix is a representations of numbers, symbols, or expressions in a 2-Dimensional Array.
In Computer Science, especially with Python, we can start to create a data structure that has values in rows and columns, much like a table, by utilizing a list within a list. There are external libraries/modules that can be imported into your python program to help this process; however, we will be constructing them with just the standalone python version.</description></item><item><title>Sets</title><link>http://mrparkonline.github.io/courses/datastruct/sets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/sets/</guid><description>Sets in Python 3 A set is an unordered collection with no duplicate elements in Python 3.
Set is a mathematical way to describe collection of different unique objects.
By following the operations and characteristics of the mathematical set, we can utilizie such data structure in our Python code.
The mathematical definition of the set can read in more details here.
Using Sets in Python 3 How to Define a Set</description></item><item><title>Tuples</title><link>http://mrparkonline.github.io/courses/datastruct/tuples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/tuples/</guid><description>Tuples in Python 3 What are Tuples? Strings and Lists are basic iterable data types that are very similar with key differences:
Strings only allow alphanumeric characters and special symbols to represent text Lists allow all data types as its items/members Strings are immutable whereas Lists are mutable These significant differences cause a headache when you require the following data structure:
It must be immutable It must allow different datatypes as items It must be iterable It must be nestable (much like a list within a list) All of these are solved with a data structure called: Tuple.</description></item></channel></rss>
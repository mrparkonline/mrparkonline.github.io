<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mr. Park's Website on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/</link><description>Recent content in Mr. Park's Website on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Aug 2020 10:49:24 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Boolean Data Type</title><link>http://mrparkonline.github.io/courses/conditionals/1booleandatatype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/1booleandatatype/</guid><description>Boolean Data Type Boolean is named after Mathematician George Boole.
The Boolean data type allow us to implement logic in our code by simplifying statements to be either True or False.
Boolean in Python 3 There are two Boolean data-typed possible values in Python.
True False Usage:
Boolean is a built-in data type much like: integer, floating points, strings and lists. We can set variables with Boolean values We can get them as a result from Comparison, Logical, and Membership operations Certain functions and methods will result in a Boolean value as well Truthy and Falsy Values in Python 3 In programming (Python), certain values can be also True or False in Conditional Situations.</description></item><item><title>Conditional Iteration</title><link>http://mrparkonline.github.io/courses/while/01conditionaliteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/01conditionaliteration/</guid><description>Conditional Iteration: While Loops Iteration is the act of repeating a mathematical or computational process. Each repeated step in iteration is also called an iteration.
While Loops While loops are our very first iteration statements that we can incorporate into our program. It behaves very similar to an if statement; however, a while loop will repeat its code block when its condition evaluates to True.
# While Loop Format while __boolean_condition__: your code here # end of while loop We can use while loops to complete repetitive tasks, generate ranges of values, and express algorithms.</description></item><item><title>Functions</title><link>http://mrparkonline.github.io/courses/functions/01functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/01functions/</guid><description>Functions in Python 3 In Python 3, we are able to create custom functions that are much similar to the built-in functions we have encountered These functions are callable and can output results to our liking This allows us to organize our code when our projects become more complex In this unit we will only cover introductory level content for functions (returning values, predetermined arguments, and nested functions). What is a Function?</description></item><item><title>Matrices &amp; List Comprehension</title><link>http://mrparkonline.github.io/courses/datastruct/matrices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/matrices/</guid><description>Matrices in Python 3 What is a Matrix? Mathematically, matrix is a representations of numbers, symbols, or expressions in a 2-Dimensional Array.
In Computer Science, especially with Python, we can start to create a data structure that has values in rows and columns, much like a table, by utilizing a list within a list. There are external libraries/modules that can be imported into your python program to help this process; however, we will be constructing them with just the standalone python version.</description></item><item><title>Run Time Analysis</title><link>http://mrparkonline.github.io/courses/complexity/runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/runtime/</guid><description>Runtime Analysis Simple Runtime Calculation with Python 3 When we are creating a solution for a problem we can be hindered by the efficency of our solution. A more efficient and well optimized code will run and solve the problem much faster than a less efficient code.
There are mathematical proofs / analysis you can do to your code to see the theoretical classification of your solution. Currently this method is beyond the scope of the course, so we will only learn the classification not the proofs We will use a built-in python module to help us calculate the runtime of our code.</description></item><item><title>Setting Up</title><link>http://mrparkonline.github.io/courses/basics/1settingup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/1settingup/</guid><description>Setting Up Easiest way to start coding in Python is to use a web service from repl.it
If you&amp;rsquo;d like to use native software or other set ups please follow the guides below:
For Windows: Guide Link from Visual Studio For macOS: Guide Link from Digital Ocean It will be assumed that you will be coding on repl.it. You may require additional setting configurations if you are using a different setup.</description></item><item><title>Boolean Operators</title><link>http://mrparkonline.github.io/courses/conditionals/2booleanoperators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/2booleanoperators/</guid><description>Boolean Operators In this lesson, we will be talking about built-in Python operators that will give us a Boolean result.
Operators:
Comparison Logical Membership Comparison Operators Comparison operators help us compare the left and the right operand in terms of magnitude.
Symbols: == Equal to != Not Equal to &amp;gt; Greater than &amp;lt; Less than &amp;gt;= Greater than or Equal to &amp;lt;= Less than or Equal to # Comparison Examples num1 = 42 num2 = 6 print(&amp;#39;num1 == num2:&amp;#39;, num1 == num2) print(&amp;#39;num1 !</description></item><item><title>Complexity Classification</title><link>http://mrparkonline.github.io/courses/complexity/complexityclassification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/complexityclassification/</guid><description>Algorithm Complexity of Time &amp;amp; Space As computer scientists started to develop various algorithms for a solutions, they needed a way to classify the effectiveness of their algorithms, and they also required a way to prove that a new algorithm is better than the old by mathematical proof &amp;amp; analysis.
Image Source
Due to this, three notations methods were developed:
Big - O Notation (the worst case scenario) Big - Theta Notation (the average case scenario) Big- Omega Notation (the best case scenario) When we analyze an algorithm we can look at all three scenarios and see their effectiveness.</description></item><item><title>Infinite While Loop</title><link>http://mrparkonline.github.io/courses/while/02infinitewhileloop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/02infinitewhileloop/</guid><description>Infinite While Loop An infinite loop is an iteration that never ends. It may seem like a bad idea to have an infinite loop; however, there are scenarios that may require an infinite loop.
The most common scenario is when a program needs to be on always.
# Infinite While Loop on Python Example Format while True: Your Code Here # end of while In the code above, since the while loop&amp;rsquo;s condition cannot ever be False, the code block inside the loop will continue to run unless there is forceful intervention: Force Quit.</description></item><item><title>Map &amp; Filter</title><link>http://mrparkonline.github.io/courses/datastruct/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/map/</guid><description>Map &amp;amp; Filter In Python 3 In this note, we will be covering some useful built-in functions to help us extend our list comprehension capabilities.
These two functions that we learn will also be revisited when we do functional programming and lambda functions.
The Map Function The idea of a map function is to apply a function to an iterable data.
Formatting: map(function_name, sequence) -- function_name: any function (built-in or selfmade) that returns a desired value of choice -- sequence: any iterable data type # Example def square(num): &amp;#39;&amp;#39;&amp;#39; squares the given num argument &amp;#39;&amp;#39;&amp;#39; return num ** 2 # end of square array = list(range(1,11)) square_array = list(map(square, array)) print(&amp;#39;Original Array:&amp;#39;, array) print(&amp;#39;Array Squared:&amp;#39;, square_array) Original Array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Array Squared: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] One thing to note about the map function is that it doesn&amp;rsquo;t return a specific data type, but rather, an python iterable data.</description></item><item><title>Print Function</title><link>http://mrparkonline.github.io/courses/basics/2printfunction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/2printfunction/</guid><description>Outputing Information w/ Python print() an output function Anytime we need to output data/information on to the interpreter, we use the print() function.
print() is a built-in function provided by Python, it helps us output to the interpreter 'Hello, World' is the argument ... the data/information that we want to output to the interpreter There are special words that are followed by parenthesis (brackets), which we call them as functions or built-in functions.</description></item><item><title>Print vs. Return</title><link>http://mrparkonline.github.io/courses/functions/02printvsreturn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/02printvsreturn/</guid><description>Print vs Return in Functions In this lesson we will be examining the differences between using a print() statement and a return statement
Example Function: Average of Integers in a List def averagePrint1(array): &amp;#39;&amp;#39;&amp;#39; averagePrint1() outputs the total average of all the integers in a list argument: -- array : a list of integers &amp;#39;&amp;#39;&amp;#39; total_sum = sum(array) length = len(array) average = total_sum / length print(&amp;#39;The average of the given list of values is:&amp;#39;, average) # end of averagePrint1 def averagePrint2(array): &amp;#39;&amp;#39;&amp;#39; averagePrint() returns the total average of all the integers in a list argument: -- array : a list of integers &amp;#39;&amp;#39;&amp;#39; total_sum = sum(array) length = len(array) average = total_sum / length return average # end of averagePrint2 # Start of the actual program values = [96, 42, 55, 4, 12, 14, 67, 25, 37, 82, 62, 13] print(&amp;#39;Executing avereagePrint1():&amp;#39;) averagePrint1(values) print(&amp;#39;Executing avereagePrint2():&amp;#39;) averagePrint2(values) print(&amp;#39;-&amp;#39;*25) print(&amp;#39;Setting variables result1:&amp;#39;) result1 = averagePrint1(values) print(&amp;#39;Setting variables result2:&amp;#39;) result2 = averagePrint2(values) print(&amp;#39;-&amp;#39;*25) print(&amp;#39;Variable result1:&amp;#39;, result1) print(&amp;#39;Variable result2:&amp;#39;, result2) Executing avereagePrint1(): The average of the given list of values is: 42.</description></item><item><title>Conditional: If Statements</title><link>http://mrparkonline.github.io/courses/conditionals/3conditionals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/3conditionals/</guid><description>Conditional: If Statements Conditionals: Features of programming language that allows different computations to occur based on decision making.
Conditionals are dependent on Boolean expressions that are evaluated to True or False. Different texts will define conditionals to be statements, expressions, or constructs. The use of conditionals is the way to control the flow of a program. if statement if is a built-in keyword in Python that allows us to write conditional statements.</description></item><item><title>Data &amp; Variables</title><link>http://mrparkonline.github.io/courses/basics/3dataandvariables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/3dataandvariables/</guid><description>Data &amp;amp; Variables Majority of the time you will be dealing with data contained in variables.
Data: Any representable information for us to grab, show and manipulate.
Variables: A labeled container that holds data for us to reference to in our code.
Basic Data Types Integers: Integers are numbers that range from negative infinity to positive infinity. Now computers have limitations based on their computer architecture.
Examples: 1, -1, 42, 1000 Floating Point Values: Floating Points are what we call decimals in computer programming; moreover, floating points represent all the real numbers.</description></item><item><title>Flag Based While Loops</title><link>http://mrparkonline.github.io/courses/while/03flagbasedwhileloop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/03flagbasedwhileloop/</guid><description>Flag Based While Loop To control when to exit a while loop, we can also a flag like variable to make the condition become False based on user input.
flag = True while flag: Your Code Here user_input = input(&amp;#39;Do you want an exit? (y/n): &amp;#39;) if user_input in &amp;#39;yY&amp;#39;: flag = False # end of while This type of formatting a while loop help us to potentially loop forever, but at the end of the code block we get to choose if we want to iterate again.</description></item><item><title>Linear Search</title><link>http://mrparkonline.github.io/courses/complexity/linear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/linear/</guid><description>Linear Search Algorithm This algorithm is used for Strings and Lists often.
index() and find() are linear searches in and not in membership for strings and lists are linear searches Algorithm Classification Big-O: O(n) hence the name &amp;ldquo;Linear&amp;rdquo; Search &amp;hellip; happens when the target is not found -or- target is the last value Big-Omega: O(1) very first item is the target Big-Theta: O(n/2) which simplifies to O(n) &amp;hellip; target is found somewhere in the middle Linear Search Algorithm: # Let L be a list of items; i be the index, and N be the number of items # Let T be a Target 1 Set i to 0 2 If L at i == Target, then return i 3 Else increase i by 1 and repeat back to Line 2 4 If i &amp;gt; N, and target has not been found, then return -1 # Python Implementation def linSearch(seq, target): &amp;#39;&amp;#39;&amp;#39; linSearch determines the location of the target in the sequence -- param seq : iterable/indexable data target : any data -- return integer &amp;#39;&amp;#39;&amp;#39; if not seq: return -1 else: for i in range(len(seq)): if seq[i] == target: return i else: return -1 # end of linSearch # Example Execution from random import seed from random import randrange seed(1) seq = [randrange(1,100) for x in range(20)] print(&amp;#39;Random List:\n&amp;#39;, seq) print(&amp;#39;--\nSearch %din seq: Found at %d&amp;#39; % (18, linSearch(seq, 18))) print(&amp;#39;Search %din seq: Found at %d&amp;#39; % (61, linSearch(seq, 61))) print(&amp;#39;Search %din seq: Found at %d&amp;#39; % (42, linSearch(seq, 42))) Random List: [18, 73, 98, 9, 33, 16, 64, 98, 58, 61, 84, 49, 27, 13, 63, 4, 50, 56, 78, 98] -- Search 18 in seq: Found at 0 Search 61 in seq: Found at 9 Search 42 in seq: Found at -1 Python 3 Note #Method 2 def linSearch(seq, target): ctr = 0 while ctr &amp;lt; len(array): if array[ctr] == target: return ctr ctr += 1 else: return -1 Some of you may want to use a while loop with a counter rather than coding a for loop.</description></item><item><title>Predetermined Arguments</title><link>http://mrparkonline.github.io/courses/functions/03predeterminedarguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/03predeterminedarguments/</guid><description>Predetermined Arguments in a Function We can set predetermined arguments when creating a functions to create versatility and complexity within our function.
Example: Distance between two points or the origin def distance(x, y, a=0,b=0): &amp;#39;&amp;#39;&amp;#39; distance() calculates the distance between point(x,y) and point(a,b). If point(a,b) is not specified, it will calculate the distance from the origin to point(x,y) Distance Formula: https://www.khanacademy.org/math/geometry/hs-geo-analytic-geometry/hs-geo-distance-and-midpoints/v/distance-formula arguments: -- x : numeric -- y : numeric -- a : numeric -- b : numeric return -- distance in units &amp;#39;&amp;#39;&amp;#39; delta_x = a - x delta_y = b - y result = (delta_x ** 2 + delta_y ** 2) ** 0.</description></item><item><title>Tuples</title><link>http://mrparkonline.github.io/courses/datastruct/tuples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/tuples/</guid><description>Tuples in Python 3 What are Tuples? Strings and Lists are basic iterable data types that are very similar with key differences:
Strings only allow alphanumeric characters and special symbols to represent text Lists allow all data types as its items/members Strings are immutable whereas Lists are mutable These significant differences cause a headache when you require the following data structure:
It must be immutable It must allow different datatypes as items It must be iterable It must be nestable (much like a list within a list) All of these are solved with a data structure called: Tuple.</description></item><item><title>Binary Conditions</title><link>http://mrparkonline.github.io/courses/conditionals/4binaryconditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/4binaryconditions/</guid><description>Binary Conditions By adding in a new keyword, we can have two possible flow to our program.
if and else statements Examine the following format below:
if (boolean condition): # if&amp;#39;s code block code here else: # else&amp;#39;s code block # end of the conditionals code continues here The if&amp;rsquo;s code block only execute if its boolean condition is True The else&amp;rsquo;s code block will execute only when the if&amp;rsquo;s boolean condition is False This helps us create two pathways in our code # Code Example 1 num = 100 if num &amp;lt; 0 and num &amp;gt; 100: print(num, &amp;#39;is invalid.</description></item><item><title>Input and Type Conversions</title><link>http://mrparkonline.github.io/courses/basics/4inputandtypeconversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/4inputandtypeconversion/</guid><description>Input and Type Conversions To allow users to interact with our program via keyboard, we need a way to read inputs from it.
input() built-in function input() is a built-in function that is able to grab input from the console when typed from the keyboard by the user The input() function will always read its data as a string data typed value Let&amp;rsquo;s see an example.
# Our example program first_name = input(&amp;#39;Enter your first name: &amp;#39;) last_name = input(&amp;#39;Enter your last name: &amp;#39;) print(&amp;#39;Hello,&amp;#39;, first_name, last_name) Enter your first name: Mr.</description></item><item><title>Nested Functions</title><link>http://mrparkonline.github.io/courses/functions/04nestedfunctions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/04nestedfunctions/</guid><description>Nested Function Much like conditionals and iterations, we are allowed to have a function inside a function.
Example: Factors of a Number in a List def factors(x): &amp;#39;&amp;#39;&amp;#39; factors() return a list of factors for x arguments: -- x : integer return -- list &amp;#39;&amp;#39;&amp;#39; def isDivisible(num): &amp;#39;&amp;#39;&amp;#39; isDivisible() checks if given num is a factor of x&amp;#39;&amp;#39;&amp;#39; return x % num == 0 # end of inner function: isDivisible() result = [] for i in range(1, x+1): if isDivisible(i): result.</description></item><item><title>Recursion</title><link>http://mrparkonline.github.io/courses/complexity/recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/recursion/</guid><description>Recursion Recursion: a method to solve computational problem by relying on smaller instances of a solution to a given problem.
The logic is that if we have a base case that helps to solves the smaller instance, then the base case solution helps to solve the bigger version of the solution.
*Example of a common recursive function: Fibonacci Number
$fib(n)= fib(n-1) + fib(n-2)$
$fib(0) = 0$
$fib(1) = 1$</description></item><item><title>Sets</title><link>http://mrparkonline.github.io/courses/datastruct/sets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/sets/</guid><description>Sets in Python 3 A set is an unordered collection with no duplicate elements in Python 3.
Set is a mathematical way to describe collection of different unique objects.
By following the operations and characteristics of the mathematical set, we can utilizie such data structure in our Python code.
The mathematical definition of the set can read in more details here.
Using Sets in Python 3 How to Define a Set</description></item><item><title>While Loop &amp; Numbers</title><link>http://mrparkonline.github.io/courses/while/04whileloopandnumbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/04whileloopandnumbers/</guid><description>While Loop and Numbers We can manipulate variables to represent a range of numbers by repetitively applying arithmetic operators.
Recall: Assignment Operators a = b # (Assignment) a += b # (Add &amp;amp; Assign) a -= b # (Subtract &amp;amp; Assign) a *= b # (Multiply &amp;amp; Assign) a /= b # (Divide &amp;amp; Assign) a //= b # (Floor Divide &amp;amp; Assign) a **= b # (Exponentiate &amp;amp; Assign) a %= b # (Modulo &amp;amp; Assign) These operators will manipulate/update the left variable with the result of the arithmetic operation with the right operand.</description></item><item><title>Basic Arithmetic in Python</title><link>http://mrparkonline.github.io/courses/basics/5basicarithmeticinpython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/5basicarithmeticinpython/</guid><description>Basic Arithmetic in Python The core arithmetic operations are all available. Therefore, we can do basic math with Python.
Binary Operators + Addition - Subtraction * Multiplication / Division // Floor Division ** Exponentiation % Modulo Let&amp;rsquo;s look at how they work:
# Example var_a = 10 var_b = 2 var_c = -5 addition = var_a + var_b print(&amp;#39;var_a + var_b:&amp;#39;, addition) # We can do arithmetic then assign the result to a variable print(&amp;#39;Subtraction:&amp;#39;, var_b - var_c) # we can also do arithmetic as function arguments / inside our print statement # BEDMAS calculation = var_a + var_c * var_b print(&amp;#39;Resulting calculation:&amp;#39;, calculation) # Python Follows BEDMAS/Order of Arithmetic operations automatically # Exponentiation print(&amp;#39;Squaring 10^2:&amp;#39;, var_a ** 2) print(&amp;#39;Square Root of 125:&amp;#39;, 125 ** 0.</description></item><item><title>Binary Search</title><link>http://mrparkonline.github.io/courses/complexity/binarysearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/binarysearch/</guid><description>Binary Search A searching algorithm that is designed to search from a sorted list.
Idea:
Compare the target with the middle most value If not found, eliminate the half where the target cannot exist Cons/Caveat:
The database must be comparable and sortable Algorithm Let A be a sorted array; N be length of A; T be searching target 1. Set Left=0 and Right=N-1 2. while Left &amp;lt;= Right: 3.</description></item><item><title>Dictionary</title><link>http://mrparkonline.github.io/courses/datastruct/dictionary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/datastruct/dictionary/</guid><description>Dictionary in Python 3 Dictionary (Associative Array, map, symbol table) is a data type that stores a collection of (key, value) pairs, such that each possible key appears at most once in the collection.
Common Operations:
Adding a pair Removing a pair Modify an existing pair Lookup of a value associated with a particular key Aside: This concept is an introduction to concepts similar to: hash table and search trees</description></item><item><title>Multiple Conditions</title><link>http://mrparkonline.github.io/courses/conditionals/5multipleconditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/5multipleconditions/</guid><description>Multiple Conditions By combining if and else we were able to create binary pathways. With another built-in conditional keyword, we can create multiple pathways in our code.
elif statement elif is a built-in keyword related to if statements.
elif can only exists if there is a related if statement above it elif can have its own condition, and it will execute its code block if the Boolean condition is True After the first if statement, you are allowed to have as many elif statements as you&amp;rsquo;d like It is recommended that your elif&amp;rsquo;s boolean condition is related to the condition that comes before it Examine the following format:</description></item><item><title>Basic Sorting Algorithms</title><link>http://mrparkonline.github.io/courses/complexity/sorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/sorting/</guid><description>Bubble Sort A sorting algorithm that is based upon comparing pairs of values and swapping their places if necessary
Overall Idea:
- (L→ List, i→ index, i starts at 1) - Look at L[i] and L[i-1] if they are not sorted, swap locations - Repeat as you increase i and until no swap occurs Bubble Sort Demonstration:
Source
Bubble Sort Algorithm Definition:
repeat until swapped is false swapped = false for i = 1 to N-1 (inclusively) if A[i-1] &amp;gt; A[i] then swap(A[i-1],A[i]) swapped = true Python Implementation:</description></item><item><title>Nested Conditional Statements</title><link>http://mrparkonline.github.io/courses/conditionals/6nestedconditionals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/6nestedconditionals/</guid><description>Nested Conditional Statements Nesting is the act of placing programming statements inside another. We can nest if statements to create complex decision trees in our program.
if statements within our if statements Examine the following format below:
if boolean_condition1: # code here if boolean_conditionA: # code here else: # code here elif boolean_condition2: # code here if boolean_conditionB: # code here elif boolean_conditionC: # code here else: # code here if boolean_conditionD: # code here This type of conditional statements are called nested conditional statements.</description></item><item><title>Useful Functions</title><link>http://mrparkonline.github.io/courses/basics/6usefulfunctions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/6usefulfunctions/</guid><description>Useful Built-in Functions These functions that we will learn are already programmed into the python language. We will learn how to use these functions to augment our code.
Maximum and Minimum Functions max() and min() are built-in functions that help us find the extremes of its arguments.
Single Argument Use: When a function only has one argument.
For max and min, the single argument must be either string or list.</description></item><item><title>Merge Sort</title><link>http://mrparkonline.github.io/courses/complexity/merge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/complexity/merge/</guid><description>Merge Sort A comparison-based algorithm that sorts a given dataset.
It is classified as a “divide and conquer” algorithm
There are 2 approaches to implementing a merge sort:
Top-Down Implementation Bottom-Up Implementation Merge Sort Demonstration:
Source
Complexity of Merge Sort:
$O(n log n)$ Worst Case Performance $O(n log n)$ Average Case Performance $O(n log n)$ Best Case Performance Merge Sort Algorithm:
-- Let A be an unsorted list, n represent size of A function: divider(A) Create two empty lists called Left and Right Get Midpoint at n/2 - 1, - all values before and include the midpoint is Left list - all values after midpoint is Right list Update Left to divider(Left) .</description></item><item><title>Modules</title><link>http://mrparkonline.github.io/courses/basics/7modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/7modules/</guid><description>Modules Modules are collection of code that is available for us to call upon when needed. This helps us program while not reinventing the wheel.
What are Modules? A module is a Python code with a sole purpose that it exists to:
Group related code Extend the capabilities of your current Python code by importing it to your own code Avoid creating solutions that already exist The two modules that we will focus on will be: math and random.</description></item><item><title>About</title><link>http://mrparkonline.github.io/about/</link><pubDate>Sat, 08 Aug 2020 14:14:58 -0400</pubDate><guid>http://mrparkonline.github.io/about/</guid><description>This about.md</description></item><item><title>Example</title><link>http://mrparkonline.github.io/guides/example/</link><pubDate>Fri, 07 Aug 2020 17:33:13 -0400</pubDate><guid>http://mrparkonline.github.io/guides/example/</guid><description>Markdown is fully supported So are a variety of other flavors If you prefer certain flavors, you should check it out on the official documentation.</description></item></channel></rss>
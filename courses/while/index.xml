<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>While Loops on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/courses/while/</link><description>Recent content in While Loops on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Aug 2020 14:27:32 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/courses/while/index.xml" rel="self" type="application/rss+xml"/><item><title>Conditional Iteration</title><link>http://mrparkonline.github.io/courses/while/01conditionaliteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/01conditionaliteration/</guid><description>Conditional Iteration: While Loops Iteration is the act of repeating a mathematical or computational process. Each repeated step in iteration is also called an iteration.
While Loops While loops are our very first iteration statements that we can incorporate into our program. It behaves very similar to an if statement; however, a while loop will repeat its code block when its condition evaluates to True.
# While Loop Format while __boolean_condition__: your code here # end of while loop We can use while loops to complete repetitive tasks, generate ranges of values, and express algorithms.</description></item><item><title>Infinite While Loop</title><link>http://mrparkonline.github.io/courses/while/02infinitewhileloop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/02infinitewhileloop/</guid><description>Infinite While Loop An infinite loop is an iteration that never ends. It may seem like a bad idea to have an infinite loop; however, there are scenarios that may require an infinite loop.
The most common scenario is when a program needs to be on always.
# Infinite While Loop on Python Example Format while True: Your Code Here # end of while In the code above, since the while loop&amp;rsquo;s condition cannot ever be False, the code block inside the loop will continue to run unless there is forceful intervention: Force Quit.</description></item><item><title>Flag Based While Loops</title><link>http://mrparkonline.github.io/courses/while/03flagbasedwhileloop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/03flagbasedwhileloop/</guid><description>Flag Based While Loop To control when to exit a while loop, we can also a flag like variable to make the condition become False based on user input.
flag = True while flag: Your Code Here user_input = input(&amp;#39;Do you want an exit? (y/n): &amp;#39;) if user_input in &amp;#39;yY&amp;#39;: flag = False # end of while This type of formatting a while loop help us to potentially loop forever, but at the end of the code block we get to choose if we want to iterate again.</description></item><item><title>While Loop &amp; Numbers</title><link>http://mrparkonline.github.io/courses/while/04whileloopandnumbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/while/04whileloopandnumbers/</guid><description>While Loop and Numbers We can manipulate variables to represent a range of numbers by repetitively applying arithmetic operators.
Recall: Assignment Operators a = b # (Assignment) a += b # (Add &amp;amp; Assign) a -= b # (Subtract &amp;amp; Assign) a *= b # (Multiply &amp;amp; Assign) a /= b # (Divide &amp;amp; Assign) a //= b # (Floor Divide &amp;amp; Assign) a **= b # (Exponentiate &amp;amp; Assign) a %= b # (Modulo &amp;amp; Assign) These operators will manipulate/update the left variable with the result of the arithmetic operation with the right operand.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Conditionals on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/courses/conditionals/</link><description>Recent content in Conditionals on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Aug 2020 14:27:32 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/courses/conditionals/index.xml" rel="self" type="application/rss+xml"/><item><title>Boolean Data Type</title><link>http://mrparkonline.github.io/courses/conditionals/1booleandatatype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/1booleandatatype/</guid><description>Boolean Data Type Boolean is named after Mathematician George Boole.
The Boolean data type allow us to implement logic in our code by simplifying statements to be either True or False.
Boolean in Python 3 There are two Boolean data-typed possible values in Python.
True False Usage:
Boolean is a built-in data type much like: integer, floating points, strings and lists. We can set variables with Boolean values We can get them as a result from Comparison, Logical, and Membership operations Certain functions and methods will result in a Boolean value as well Truthy and Falsy Values in Python 3 In programming (Python), certain values can be also True or False in Conditional Situations.</description></item><item><title>Boolean Operators</title><link>http://mrparkonline.github.io/courses/conditionals/2booleanoperators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/2booleanoperators/</guid><description>Boolean Operators In this lesson, we will be talking about built-in Python operators that will give us a Boolean result.
Operators:
Comparison Logical Membership Comparison Operators Comparison operators help us compare the left and the right operand in terms of magnitude.
Symbols: == Equal to != Not Equal to &amp;gt; Greater than &amp;lt; Less than &amp;gt;= Greater than or Equal to &amp;lt;= Less than or Equal to # Comparison Examples num1 = 42 num2 = 6 print(&amp;#39;num1 == num2:&amp;#39;, num1 == num2) print(&amp;#39;num1 !</description></item><item><title>Conditional: If Statements</title><link>http://mrparkonline.github.io/courses/conditionals/3conditionals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/3conditionals/</guid><description>Conditional: If Statements Conditionals: Features of programming language that allows different computations to occur based on decision making.
Conditionals are dependent on Boolean expressions that are evaluated to True or False. Different texts will define conditionals to be statements, expressions, or constructs. The use of conditionals is the way to control the flow of a program. if statement if is a built-in keyword in Python that allows us to write conditional statements.</description></item><item><title>Binary Conditions</title><link>http://mrparkonline.github.io/courses/conditionals/4binaryconditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/4binaryconditions/</guid><description>Binary Conditions By adding in a new keyword, we can have two possible flow to our program.
if and else statements Examine the following format below:
if (boolean condition): # if&amp;#39;s code block code here else: # else&amp;#39;s code block # end of the conditionals code continues here The if&amp;rsquo;s code block only execute if its boolean condition is True The else&amp;rsquo;s code block will execute only when the if&amp;rsquo;s boolean condition is False This helps us create two pathways in our code # Code Example 1 num = 100 if num &amp;lt; 0 and num &amp;gt; 100: print(num, &amp;#39;is invalid.</description></item><item><title>Multiple Conditions</title><link>http://mrparkonline.github.io/courses/conditionals/5multipleconditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/5multipleconditions/</guid><description>Multiple Conditions By combining if and else we were able to create binary pathways. With another built-in conditional keyword, we can create multiple pathways in our code.
elif statement elif is a built-in keyword related to if statements.
elif can only exists if there is a related if statement above it elif can have its own condition, and it will execute its code block if the Boolean condition is True After the first if statement, you are allowed to have as many elif statements as you&amp;rsquo;d like It is recommended that your elif&amp;rsquo;s boolean condition is related to the condition that comes before it Examine the following format:</description></item><item><title>Nested Conditional Statements</title><link>http://mrparkonline.github.io/courses/conditionals/6nestedconditionals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/conditionals/6nestedconditionals/</guid><description>Nested Conditional Statements Nesting is the act of placing programming statements inside another. We can nest if statements to create complex decision trees in our program.
if statements within our if statements Examine the following format below:
if boolean_condition1: # code here if boolean_conditionA: # code here else: # code here elif boolean_condition2: # code here if boolean_conditionB: # code here elif boolean_conditionC: # code here else: # code here if boolean_conditionD: # code here This type of conditional statements are called nested conditional statements.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Strings on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/courses/strings/</link><description>Recent content in Strings on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Aug 2020 14:27:32 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/courses/strings/index.xml" rel="self" type="application/rss+xml"/><item><title>String Basics</title><link>http://mrparkonline.github.io/courses/strings/01stringbasics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/01stringbasics/</guid><description>String Basics Strings are our first sequence-like data type that we get to manipulate in Python.
Strings Strings are a data type in Python 3 that represent sequence of alphanumeric characters and special symbols. Strings will be enclosed with either 'single' or &amp;quot;double&amp;quot; quotations marks to denote them as strings. You cannot mix match the quotations.
Examples:
&amp;quot;a&amp;quot; or 'a' &amp;quot;1&amp;quot; or '1' &amp;quot;0010&amp;quot; or '0010' String Characteristics Variables can hold string type values: last_name = &amp;quot;Park&amp;quot; A string value can be empty: string_variable = '' A space is considered a non-empty string Strings are comparable; therefore, you can create boolean expressions when comparing strings 'Hello' == 'hello' evaluates to False because strings are also case-sensitive (also, the ascii value comparisons are different) String Comparison Source: Wikipedia</description></item><item><title>String Indexing</title><link>http://mrparkonline.github.io/courses/strings/02stringindexing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/02stringindexing/</guid><description>String Indexing In Python, we can access a certain/individual item in a sequence if the data type is indexable.
To index/access a single item from a string, we use [ ] square brackets.
# Example &amp;#39;&amp;#39;&amp;#39; Looking at: &amp;#39;Hello!&amp;#39; | H | e | l | l | o | ! | 0 1 2 3 4 5 6 &amp;#39;&amp;#39;&amp;#39; word = &amp;#39;Hello!&amp;#39; print(&amp;#39;word[2]:&amp;#39;, word[2]) print(&amp;#39;word[1]:&amp;#39;, word[1]) print(&amp;#39;word[0]:&amp;#39;, word[0]) print(&amp;#39;word[5]:&amp;#39;, word[5]) print(&amp;#39;word[6]:&amp;#39;, word[6]) word[2]: l word[1]: e word[0]: H word[5]: !</description></item><item><title>String Slicing</title><link>http://mrparkonline.github.io/courses/strings/03stringslicing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/03stringslicing/</guid><description>String Slicing In Python, you can also separate certain sections of the data if the date type is slicable.
Similar to indexing, we also use [ ] square brackets to slice sequences.
Slicing Format Given a string value, we can slice it as following:
string_value[starting_index : ending_index : step_value] Slicing generates a new string; therefore, slices can be set to a variable The slice will start and include the value at starting_index The slice will end at ending_index, but not include the value at the ending_index The ending_index can be a value greater than the largest index possible If the step_value is not specified, it is set to: 1 If the slicing values are set to an impossible outcome, it will return an empty string: '' # Example &amp;#39;&amp;#39;&amp;#39; Looking at: &amp;#39;Hello!</description></item><item><title>String Operators and Functions</title><link>http://mrparkonline.github.io/courses/strings/04stringoperatorsandfunctions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/04stringoperatorsandfunctions/</guid><description>String Operators and Functions String Operators Much like how integers and floating point values have arithmetic operators, Strings also have built-in operators as well.
+ Operator: Concatenation
Concatenation is the joining of two string values * Operator: Repetition
Repetition operator allows us to repeat a certain string multiple times [start:end:step] Operation: Indexing and Slicing
With indexing and slicing, we can grab different parts of a given string in || not in Operator: Membership</description></item><item><title>String Formatting</title><link>http://mrparkonline.github.io/courses/strings/05stringformatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/05stringformatting/</guid><description>String Formatting String formatting is controlling the output of a given string especially when using the print() function. For some reason, this is a topic that is debated quite often as there are multiple ways to do string formatting.
Consider reading Google&amp;rsquo;s Style Guide for Strings when you are using strings.
Escape Characters Certain characters are not allowed to be inserted into a string so we must use Escape Characters to insert them.</description></item><item><title>More String Methods</title><link>http://mrparkonline.github.io/courses/strings/07morestringmethods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/07morestringmethods/</guid><description>More String Methods The string data type has a lot of useful built-in methods that can help us solve more complex problems.
Removing Leading and/or Trailing Spaces These methods do not remove spaces within the text.
string_data.strip()
Returns a string that loses all leading and trailing white spaces string_data.lstrip()
Returns a string that loses all leading white spaces string_data.rstrip()
Returns a string that loses all trailing white spaces # Strip() Examples word1 = &amp;#39; h ello &amp;#39; # 3 spaces then h ello then 3 spaces print(&amp;#39;word1.</description></item><item><title>Basic String Methods</title><link>http://mrparkonline.github.io/courses/strings/06basicstringmethods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/strings/06basicstringmethods/</guid><description>Basic String Methods In this lesson, we will be looking a string methods that deal with searching, checking the status, and editing strings.
This is not an exhaustive list of all methods with strings. You check out the list of methods here.
Methods: set of code belonging to a certain data/object
String and List data types have special methods only for them Usually, we need a period before the method name to use them Example: print('Hello {}!</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Basics on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/courses/basics/</link><description>Recent content in Python Basics on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Aug 2020 14:27:32 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/courses/basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting Up</title><link>http://mrparkonline.github.io/courses/basics/1settingup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/1settingup/</guid><description>Setting Up Easiest way to start coding in Python is to use a web service from repl.it
If you&amp;rsquo;d like to use native software or other set ups please follow the guides below:
For Windows: Guide Link from Visual Studio For macOS: Guide Link from Digital Ocean It will be assumed that you will be coding on repl.it. You may require additional setting configurations if you are using a different setup.</description></item><item><title>Print Function</title><link>http://mrparkonline.github.io/courses/basics/2printfunction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/2printfunction/</guid><description>Outputing Information w/ Python print() an output function Anytime we need to output data/information on to the interpreter, we use the print() function.
print() is a built-in function provided by Python, it helps us output to the interpreter 'Hello, World' is the argument ... the data/information that we want to output to the interpreter There are special words that are followed by parenthesis (brackets), which we call them as functions or built-in functions.</description></item><item><title>Data &amp; Variables</title><link>http://mrparkonline.github.io/courses/basics/3dataandvariables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/3dataandvariables/</guid><description>Data &amp;amp; Variables Majority of the time you will be dealing with data contained in variables.
Data: Any representable information for us to grab, show and manipulate.
Variables: A labeled container that holds data for us to reference to in our code.
Basic Data Types Integers: Integers are numbers that range from negative infinity to positive infinity. Now computers have limitations based on their computer architecture.
Examples: 1, -1, 42, 1000 Floating Point Values: Floating Points are what we call decimals in computer programming; moreover, floating points represent all the real numbers.</description></item><item><title>Input and Type Conversions</title><link>http://mrparkonline.github.io/courses/basics/4inputandtypeconversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/4inputandtypeconversion/</guid><description>Input and Type Conversions To allow users to interact with our program via keyboard, we need a way to read inputs from it.
input() built-in function input() is a built-in function that is able to grab input from the console when typed from the keyboard by the user The input() function will always read its data as a string data typed value Let&amp;rsquo;s see an example.
# Our example program first_name = input(&amp;#39;Enter your first name: &amp;#39;) last_name = input(&amp;#39;Enter your last name: &amp;#39;) print(&amp;#39;Hello,&amp;#39;, first_name, last_name) Enter your first name: Mr.</description></item><item><title>Basic Arithmetic in Python</title><link>http://mrparkonline.github.io/courses/basics/5basicarithmeticinpython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/5basicarithmeticinpython/</guid><description>Basic Arithmetic in Python The core arithmetic operations are all available. Therefore, we can do basic math with Python.
Binary Operators + Addition - Subtraction * Multiplication / Division // Floor Division ** Exponentiation % Modulo Let&amp;rsquo;s look at how they work:
# Example var_a = 10 var_b = 2 var_c = -5 addition = var_a + var_b print(&amp;#39;var_a + var_b:&amp;#39;, addition) # We can do arithmetic then assign the result to a variable print(&amp;#39;Subtraction:&amp;#39;, var_b - var_c) # we can also do arithmetic as function arguments / inside our print statement # BEDMAS calculation = var_a + var_c * var_b print(&amp;#39;Resulting calculation:&amp;#39;, calculation) # Python Follows BEDMAS/Order of Arithmetic operations automatically # Exponentiation print(&amp;#39;Squaring 10^2:&amp;#39;, var_a ** 2) print(&amp;#39;Square Root of 125:&amp;#39;, 125 ** 0.</description></item><item><title>Useful Functions</title><link>http://mrparkonline.github.io/courses/basics/6usefulfunctions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/6usefulfunctions/</guid><description>Useful Built-in Functions These functions that we will learn are already programmed into the python language. We will learn how to use these functions to augment our code.
Maximum and Minimum Functions max() and min() are built-in functions that help us find the extremes of its arguments.
Single Argument Use: When a function only has one argument.
For max and min, the single argument must be either string or list.</description></item><item><title>Modules</title><link>http://mrparkonline.github.io/courses/basics/7modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/basics/7modules/</guid><description>Modules Modules are collection of code that is available for us to call upon when needed. This helps us program while not reinventing the wheel.
What are Modules? A module is a Python code with a sole purpose that it exists to:
Group related code Extend the capabilities of your current Python code by importing it to your own code Avoid creating solutions that already exist The two modules that we will focus on will be: math and random.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lists on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/courses/lists/</link><description>Recent content in Lists on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Aug 2020 14:27:32 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/courses/lists/index.xml" rel="self" type="application/rss+xml"/><item><title>List Basics</title><link>http://mrparkonline.github.io/courses/lists/01listbasics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/lists/01listbasics/</guid><description>List Basics Lists are a collection data item values.
List is a built-in data type in Python 3 Each item can be same or different data type (Int, Float, String, Boolean, List, and etc) Each items are separated by a comma except the last A list is denoted by square brackets: [ ] A list is iterable; therefore, we can traverse through it with a for loop Lists are compatible with the following built-in functions: str() and tuple() :: can be converted to these data-types easily len() :: returns the size of your list enumerate() :: to help you pair index and items reversed() :: will create a flipped iterator object sorted() :: will help you return a sorted version of the list min() and max() :: will help you determine the least and greatest value within a list, and compare lists sum() :: in a list composed of numeric values, sum() will add up all the values many more, but they are deemed advanced and requires their own lessons Examples:</description></item><item><title>Lists are Mutable</title><link>http://mrparkonline.github.io/courses/lists/02listsaremutable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/lists/02listsaremutable/</guid><description>Lists are Mutable Lists are mutable data type. This means that its composition can be altered without recreation, reassignment, redeclaration. This can be dangerous for most new programmers.
Example 1: Altering via index:
# Manipulation by index primes = [2,3,5,7,11] print(&amp;#39;primes currently:&amp;#39;, primes) primes[1] = 10000 primes[2] = &amp;#39;Hello!&amp;#39; print(&amp;#39;primes now:&amp;#39;, primes) primes currently: [2, 3, 5, 7, 11] primes now: [2, 10000, 'Hello!', 7, 11] In example 1, you can see that we can change the composition of the list without redeclaring a new list for the variable: primes.</description></item><item><title>Adding Values to a List</title><link>http://mrparkonline.github.io/courses/lists/03addingvaluestoalist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/lists/03addingvaluestoalist/</guid><description>Adding Values to a List List&amp;rsquo;s versatility to comes from its ability to contain information and add on information. This lesson covers how to do so.
Adding an Item to the End of a List This is the safest and the recommended way to add values: add the new value to the end.
.append(item) is method that adds the given item to the end of a list.
# .append() Example a_list = [&amp;#39;apple&amp;#39;, &amp;#39;oranges&amp;#39;] a_list.</description></item><item><title>Removing Values from a List</title><link>http://mrparkonline.github.io/courses/lists/04removingvaluesfromalist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/lists/04removingvaluesfromalist/</guid><description>Removing Values from a List There are many ways to remove values from a list, we will be exploring most of them.
With removal, there are a lot of dangerous situations that can occur. It is advised to understand each technique before thinking about value removals.
Removal by a Target Value .remove(target) method will remove the first occurance of the targetted value if it exists in the list.
If the target_value doesnâ€™t exist, it will produce an error.</description></item><item><title>Searching and Reversing a List</title><link>http://mrparkonline.github.io/courses/lists/05searchingandreversing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/lists/05searchingandreversing/</guid><description>Searching &amp;amp; Reversing a List Finding a Targetted Value .index(target, start, end) method will find the first occurance of the target if it exists.
If the target does not exist, it raises and error Both start and end arguments are optional They act like slicing mechanism, we can look for the index of a value within such boundaries # .index() example a_list = [&amp;#39;apple&amp;#39;, &amp;#39;oranges&amp;#39;, &amp;#39;kiwi&amp;#39;, &amp;#39;honeydew&amp;#39;, &amp;#39;apple&amp;#39;] print(&amp;#34;a_list.</description></item></channel></rss>
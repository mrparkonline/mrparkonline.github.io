<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functions on Mr. Park's Site | mrparkonline</title><link>http://mrparkonline.github.io/courses/functions/</link><description>Recent content in Functions on Mr. Park's Site | mrparkonline</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Aug 2020 14:27:32 -0400</lastBuildDate><atom:link href="http://mrparkonline.github.io/courses/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>Functions</title><link>http://mrparkonline.github.io/courses/functions/01functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/01functions/</guid><description>Functions in Python 3 In Python 3, we are able to create custom functions that are much similar to the built-in functions we have encountered These functions are callable and can output results to our liking This allows us to organize our code when our projects become more complex In this unit we will only cover introductory level content for functions (returning values, predetermined arguments, and nested functions). What is a Function?</description></item><item><title>Print vs. Return</title><link>http://mrparkonline.github.io/courses/functions/02printvsreturn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/02printvsreturn/</guid><description>Print vs Return in Functions In this lesson we will be examining the differences between using a print() statement and a return statement
Example Function: Average of Integers in a List def averagePrint1(array): &amp;#39;&amp;#39;&amp;#39; averagePrint1() outputs the total average of all the integers in a list argument: -- array : a list of integers &amp;#39;&amp;#39;&amp;#39; total_sum = sum(array) length = len(array) average = total_sum / length print(&amp;#39;The average of the given list of values is:&amp;#39;, average) # end of averagePrint1 def averagePrint2(array): &amp;#39;&amp;#39;&amp;#39; averagePrint() returns the total average of all the integers in a list argument: -- array : a list of integers &amp;#39;&amp;#39;&amp;#39; total_sum = sum(array) length = len(array) average = total_sum / length return average # end of averagePrint2 # Start of the actual program values = [96, 42, 55, 4, 12, 14, 67, 25, 37, 82, 62, 13] print(&amp;#39;Executing avereagePrint1():&amp;#39;) averagePrint1(values) print(&amp;#39;Executing avereagePrint2():&amp;#39;) averagePrint2(values) print(&amp;#39;-&amp;#39;*25) print(&amp;#39;Setting variables result1:&amp;#39;) result1 = averagePrint1(values) print(&amp;#39;Setting variables result2:&amp;#39;) result2 = averagePrint2(values) print(&amp;#39;-&amp;#39;*25) print(&amp;#39;Variable result1:&amp;#39;, result1) print(&amp;#39;Variable result2:&amp;#39;, result2) Executing avereagePrint1(): The average of the given list of values is: 42.</description></item><item><title>Predetermined Arguments</title><link>http://mrparkonline.github.io/courses/functions/03predeterminedarguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/03predeterminedarguments/</guid><description>Predetermined Arguments in a Function We can set predetermined arguments when creating a functions to create versatility and complexity within our function.
Example: Distance between two points or the origin def distance(x, y, a=0,b=0): &amp;#39;&amp;#39;&amp;#39; distance() calculates the distance between point(x,y) and point(a,b). If point(a,b) is not specified, it will calculate the distance from the origin to point(x,y) Distance Formula: https://www.khanacademy.org/math/geometry/hs-geo-analytic-geometry/hs-geo-distance-and-midpoints/v/distance-formula arguments: -- x : numeric -- y : numeric -- a : numeric -- b : numeric return -- distance in units &amp;#39;&amp;#39;&amp;#39; delta_x = a - x delta_y = b - y result = (delta_x ** 2 + delta_y ** 2) ** 0.</description></item><item><title>Nested Functions</title><link>http://mrparkonline.github.io/courses/functions/04nestedfunctions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mrparkonline.github.io/courses/functions/04nestedfunctions/</guid><description>Nested Function Much like conditionals and iterations, we are allowed to have a function inside a function.
Example: Factors of a Number in a List def factors(x): &amp;#39;&amp;#39;&amp;#39; factors() return a list of factors for x arguments: -- x : integer return -- list &amp;#39;&amp;#39;&amp;#39; def isDivisible(num): &amp;#39;&amp;#39;&amp;#39; isDivisible() checks if given num is a factor of x&amp;#39;&amp;#39;&amp;#39; return x % num == 0 # end of inner function: isDivisible() result = [] for i in range(1, x+1): if isDivisible(i): result.</description></item></channel></rss>